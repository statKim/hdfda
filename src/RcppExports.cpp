// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// normalize_phi
Rcpp::NumericMatrix normalize_phi(Rcpp::NumericMatrix phi, Rcpp::NumericVector work_grid);
RcppExport SEXP _hdfda_normalize_phi(SEXP phiSEXP, SEXP work_gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type work_grid(work_gridSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_phi(phi, work_grid));
    return rcpp_result_gen;
END_RCPP
}
// get_fpc_scores
Rcpp::NumericMatrix get_fpc_scores(Rcpp::NumericMatrix X, Rcpp::NumericMatrix phi, Rcpp::NumericVector work_grid);
RcppExport SEXP _hdfda_get_fpc_scores(SEXP XSEXP, SEXP phiSEXP, SEXP work_gridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type work_grid(work_gridSEXP);
    rcpp_result_gen = Rcpp::wrap(get_fpc_scores(X, phi, work_grid));
    return rcpp_result_gen;
END_RCPP
}
// group_scad_flr_cpp
Rcpp::List group_scad_flr_cpp(const Eigen::Map<Eigen::VectorXd> Y, const Eigen::Map<Eigen::MatrixXd> Theta, int p, int s, const double lambda, const double a, const int max_iter, const double tol);
RcppExport SEXP _hdfda_group_scad_flr_cpp(SEXP YSEXP, SEXP ThetaSEXP, SEXP pSEXP, SEXP sSEXP, SEXP lambdaSEXP, SEXP aSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type a(aSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(group_scad_flr_cpp(Y, Theta, p, s, lambda, a, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// group_lla_admm
Rcpp::List group_lla_admm(const Eigen::MatrixXd& Sigma, const Eigen::VectorXd& delta, int s, double lambda, double gamma, int max_iter_lla, int max_iter_admm, double rho, double tol, double tol_abs, double tol_rel);
RcppExport SEXP _hdfda_group_lla_admm(SEXP SigmaSEXP, SEXP deltaSEXP, SEXP sSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP max_iter_llaSEXP, SEXP max_iter_admmSEXP, SEXP rhoSEXP, SEXP tolSEXP, SEXP tol_absSEXP, SEXP tol_relSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter_lla(max_iter_llaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter_admm(max_iter_admmSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type tol_abs(tol_absSEXP);
    Rcpp::traits::input_parameter< double >::type tol_rel(tol_relSEXP);
    rcpp_result_gen = Rcpp::wrap(group_lla_admm(Sigma, delta, s, lambda, gamma, max_iter_lla, max_iter_admm, rho, tol, tol_abs, tol_rel));
    return rcpp_result_gen;
END_RCPP
}
// group_lla_nested_admm
Rcpp::List group_lla_nested_admm(const Eigen::MatrixXd& Sigma, const Eigen::VectorXd& delta, int s, const Eigen::MatrixXd& Theta, double lambda, double gamma, int max_iter_lla, int max_iter_admm, int max_iter_nested_admm, double rho, double sigma, double tol, double tol_abs, double tol_rel);
RcppExport SEXP _hdfda_group_lla_nested_admm(SEXP SigmaSEXP, SEXP deltaSEXP, SEXP sSEXP, SEXP ThetaSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP max_iter_llaSEXP, SEXP max_iter_admmSEXP, SEXP max_iter_nested_admmSEXP, SEXP rhoSEXP, SEXP sigmaSEXP, SEXP tolSEXP, SEXP tol_absSEXP, SEXP tol_relSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter_lla(max_iter_llaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter_admm(max_iter_admmSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter_nested_admm(max_iter_nested_admmSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type tol_abs(tol_absSEXP);
    Rcpp::traits::input_parameter< double >::type tol_rel(tol_relSEXP);
    rcpp_result_gen = Rcpp::wrap(group_lla_nested_admm(Sigma, delta, s, Theta, lambda, gamma, max_iter_lla, max_iter_admm, max_iter_nested_admm, rho, sigma, tol, tol_abs, tol_rel));
    return rcpp_result_gen;
END_RCPP
}
// group_lla_nested_admm_warm_start
Rcpp::List group_lla_nested_admm_warm_start(const Eigen::MatrixXd& Sigma, const Eigen::VectorXd& delta, int s, const Eigen::MatrixXd& Theta, double lambda, double gamma, int max_iter_lla, int max_iter_admm, int max_iter_nested_admm, double rho, double sigma, double tol, double tol_abs, double tol_rel);
RcppExport SEXP _hdfda_group_lla_nested_admm_warm_start(SEXP SigmaSEXP, SEXP deltaSEXP, SEXP sSEXP, SEXP ThetaSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP max_iter_llaSEXP, SEXP max_iter_admmSEXP, SEXP max_iter_nested_admmSEXP, SEXP rhoSEXP, SEXP sigmaSEXP, SEXP tolSEXP, SEXP tol_absSEXP, SEXP tol_relSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter_lla(max_iter_llaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter_admm(max_iter_admmSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter_nested_admm(max_iter_nested_admmSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type tol_abs(tol_absSEXP);
    Rcpp::traits::input_parameter< double >::type tol_rel(tol_relSEXP);
    rcpp_result_gen = Rcpp::wrap(group_lla_nested_admm_warm_start(Sigma, delta, s, Theta, lambda, gamma, max_iter_lla, max_iter_admm, max_iter_nested_admm, rho, sigma, tol, tol_abs, tol_rel));
    return rcpp_result_gen;
END_RCPP
}
// trapzRcpp
double trapzRcpp(const Rcpp::NumericVector X, const Rcpp::NumericVector Y);
RcppExport SEXP _hdfda_trapzRcpp(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(trapzRcpp(X, Y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hdfda_normalize_phi", (DL_FUNC) &_hdfda_normalize_phi, 2},
    {"_hdfda_get_fpc_scores", (DL_FUNC) &_hdfda_get_fpc_scores, 3},
    {"_hdfda_group_scad_flr_cpp", (DL_FUNC) &_hdfda_group_scad_flr_cpp, 8},
    {"_hdfda_group_lla_admm", (DL_FUNC) &_hdfda_group_lla_admm, 11},
    {"_hdfda_group_lla_nested_admm", (DL_FUNC) &_hdfda_group_lla_nested_admm, 14},
    {"_hdfda_group_lla_nested_admm_warm_start", (DL_FUNC) &_hdfda_group_lla_nested_admm_warm_start, 14},
    {"_hdfda_trapzRcpp", (DL_FUNC) &_hdfda_trapzRcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_hdfda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
