% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hdflda.R
\name{cv.hdflda}
\alias{cv.hdflda}
\title{K-fold cross-validation for \code{hdflda}}
\usage{
cv.hdflda(
  X,
  y,
  grid = NULL,
  basis = "bspline",
  n_basis_list = NULL,
  lambda_list = NULL,
  measure = "accuracy",
  tol = 1e-07,
  K = 10
)
}
\arguments{
\item{X}{a n-m-p array (p-variate functional data; each functional data consists of n curves observed from m timepoints)}

\item{y}{a integer vector containing class label of X (n x 1 vector)}

\item{grid}{a vector containing m timepoints}

\item{basis}{"bspline" is only supported}

\item{n_basis_list}{a vector containing the candidate of \code{n_basis} (the number of cubic B-spline bases using \code{n_basis}-2 knots)}

\item{lambda_list}{a vector containing the candidate of \code{lambda} (a penalty parameter for L1-regularization)}

\item{measure}{the loss function for the cross-validation. "accuracy" or "cross.entropy" (Default is "accuracy")}

\item{tol}{a tolerance rate to define the sparse discriminant set}

\item{K}{the nuber of folds for K-fold CV}
}
\value{
a \code{hdflda} object
}
\description{
Select the optimal \code{n_basis} and \code{lambda} for \code{hdflda} using K-fold cross-validation
Parallel computing can be used by using the \code{doParallel} package usages.
}
\examples{
\dontrun{
library(doParallel)
cl <- makePSOCKcluster(detectCores()/2)
registerDoParallel(cl)
fit <- cv.hdflda(X_train, y_train)
stopCluster(cl)
pred <- predict(fit$opt_fit, X_test)
mean(pred != y_test)
}

}
